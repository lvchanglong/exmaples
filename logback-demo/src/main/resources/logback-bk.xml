<!--
configuration，配置信息
scan: true或false，默认值为true。当值为true时，每隔一段时间(scanPeriod)扫描一次配置文件，如果此时发现配置文件有过变动，就会将其重新进行载入。
scanPeriod: 设置扫描配置文件的时间间隔，默认为60秒。当scan为true时，此设置生效。可选时间单位（milliseconds, seconds, minutes, hours）
debug: true或false，默认值为false。当值为true时，将输出logback内部状态信息。换句话说，true时，可理解为，能够实时查看logback的运行状态。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--
    appender，定制输出方案。
    name: 唯一名称。
    class: 类名，可以理解为输出类别，常用类别有ch.qos.logback.core.ConsoleAppender, ch.qos.logback.core.FileAppender, ch.qos.logback.core.rolling.RollingFileAppender...
    -->
    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <!--
        file: 文件所在路径（输出到...）
        append: 输出策略。true，追加策略，新日志内容将被追加至文件末尾。false，将用新日志内容来替换现有文件。默认是true
        -->
        <file>myApp.log</file>
        <append>true</append>
        <!--
        encoder（或layout），负责日志信息格式化及实际输出工作。但有一点，需要特别注意，某些appender没有也不需要有Encoder或Layout，如SocketAppender
        class: 默认值ch.qos.logback.classic.encoder.PatternLayoutEncoder
        -->
        <encoder>
            <!--
            pattern，日志输出模式，即格式化日志信息的输出
            %: 转换关键字
            d或者date: 时间
            level: 日志级别门限
            thread: 线程
            logger: 对象类名称
            file: 文件名（不含包名）
            line: 行号
            message: 指定输出的信息，如logger.trace("Hello World !!!")中的Hello World !!!
            n: 换行
            relative: 耗时
            ...
            -->
            <pattern>%date %level [%thread] %logger{10} [%file:%line] %message%n</pattern>
        </encoder>
    </appender>

    <appender name="ROLLINGFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--
        每天生成一个日志文件，可以简单理解为，只保留最近30天的日志。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %message%n</pattern>
        </encoder>
    </appender>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%message%n</pattern>
        </encoder>
    </appender>

    <!--
    logger，负责日志信息记录及过滤。
    name: 覆盖范围。可以是包名或者类名（如Hello）
    level: 设定日志级别门限。“有低到高”依次是：ALL, TRACE, DEBUG, INFO, WARN, ERROR, OFF
    additivity: true或false，是否可以叠加。决定appender的继承方式，主要有两种：附加继承和覆盖继承。
    additivity为true时，即父logger为root。未指定level时，level继承自root。指定为INFO后，那就只能是INFO。
    additivity为true时，接受消息后会继续向root传递。false时不传递。
    -->
    <logger name="chapters" level="INFO" additivity="false">
        <appender-ref ref="ROLLINGFILE" /><!--将日志输出到动态创建的文件中-->
    </logger>

    <!--
    additivity为true时，即父logger的name为chapters。未指定level时，level继承自父logger。指定为DEBUG后，那就只能是DEBUG。
    additivity为true时，接受消息后会继续向父logger传递(name为chapters的logger)。false时不传递。
    -->
    <logger name="chapters.Hello" level="DEBUG"/>

    <!--
    root，所有logger的父logger，类似于java中的Object。
    可简单理解为，root是这样一个logger：name固定为root，additivity固定为false，level可选，默认是DEBUG
    -->
    <root level="DEBUG">
        <appender-ref ref="FILE" /><!--将日志输出到“指定”的文件中-->
        <appender-ref ref="STDOUT" /><!--将日志输出到控制台中-->
    </root>
</configuration>